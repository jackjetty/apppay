package com.rising.appserver.action;

import java.io.IOException;
import java.util.HashMap;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.DocumentException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.google.gson.Gson;
import com.rising.appserver.common.BaseAction;
import com.rising.appserver.service.LotteryService;


@Controller
@RequestMapping("/lottery")
public class LotteryAction extends BaseAction {
	
	Log log = LogFactory.getLog(LotteryAction.class);
	
	private static String [] parameterMust = new String []{"PhoneNumber"};
	
	private static String [] parameterMust2 = new String []{"PhoneNumber","LotteryID"};
	
	private static String [] parameterMust3 = new String []{"PhoneNumber","PageIndex"};
	
	private static String [] parameterMust4 = new String []{"ImgName","Size"};
	
	private static String [] parameterMust5 = new String []{"ImgName"};
	
	@Autowired LotteryService lotteryService;

	@RequestMapping("/getInfo")
	public void getInfo(HttpServletRequest request,HttpServletResponse response){
		HashMap<String, String> paraMap = null;
		HashMap<String, Object> result = new HashMap<String, Object>();
		String resultGson;
		try {
			paraMap = getParameterFromRequest(request);
			if (CheckParameter(parameterMust, paraMap)) {
				String parameter = mapToString(paraMap);
				resultGson = lotteryService.getInfo(parameter,request);
			} else {
				result.put("respCode", -100);
				result.put("respInfo", "App发送数据错误!");
				resultGson = new Gson().toJson(result);
			}
		} catch (DocumentException e) {
			result.put("respCode", -101);
			result.put("respInfo", "App发送xml报文格式出错!");
			resultGson = new Gson().toJson(result);
			log.error("record()->App发送xml报文格式出错!" + e.toString());
		} catch (IOException e) {
			result.put("respCode", -200);
			result.put("respInfo", "读取请求xml报文出错！");
			resultGson = new Gson().toJson(result);
			log.error("record()->读取请求xml报文出错！" + e.toString());
		}
		writerGson(resultGson,request, response);
	}
	
	@RequestMapping("/winning")
	public void winning(HttpServletRequest request,HttpServletResponse response){
		HashMap<String, String> paraMap = null;
		HashMap<String, Object> result = new HashMap<String, Object>();
		String resultGson;
		try {
			paraMap = getParameterFromRequest(request);
			if (CheckParameter(parameterMust2, paraMap)) {
				String parameter = mapToString(paraMap);
				resultGson = lotteryService.addWinningInfo(parameter,request);
			} else {
				result.put("respCode", -100);
				result.put("respInfo", "App发送数据错误!");
				resultGson = new Gson().toJson(result);
			}
		} catch (DocumentException e) {
			result.put("respCode", -101);
			result.put("respInfo", "App发送xml报文格式出错!");
			resultGson = new Gson().toJson(result);
			log.error("record()->App发送xml报文格式出错!" + e.toString());
		} catch (IOException e) {
			result.put("respCode", -200);
			result.put("respInfo", "读取请求xml报文出错！");
			resultGson = new Gson().toJson(result);
			log.error("record()->读取请求xml报文出错！" + e.toString());
		}
		writerGson(resultGson,request, response);
	}
	
	@RequestMapping("/check")
	public void check(HttpServletRequest request,HttpServletResponse response){
		HashMap<String, String> paraMap = null;
		HashMap<String, Object> result = new HashMap<String, Object>();
		String resultGson;
		try {
			paraMap = getParameterFromRequest(request);
			if (CheckParameter(parameterMust3, paraMap)) {
				String parameter = mapToString(paraMap);
				resultGson = lotteryService.checkWinning(parameter,request);
			} else {
				result.put("respCode", -100);
				result.put("respInfo", "App发送数据错误!");
				resultGson = new Gson().toJson(result);
			}
		} catch (DocumentException e) {
			result.put("respCode", -101);
			result.put("respInfo", "App发送xml报文格式出错!");
			resultGson = new Gson().toJson(result);
			log.error("record()->App发送xml报文格式出错!" + e.toString());
		} catch (IOException e) {
			result.put("respCode", -200);
			result.put("respInfo", "读取请求xml报文出错！");
			resultGson = new Gson().toJson(result);
			log.error("record()->读取请求xml报文出错！" + e.toString());
		}
		writerGson(resultGson, request,response);
	}
	
	@RequestMapping("/getImage")
	public void getImage(HttpServletRequest request,HttpServletResponse response){
		HashMap<String, String> paraMap = null;
		HashMap<String, Object> result = new HashMap<String, Object>();
		String resultGson;
		byte [] buffimage;
		try {
			paraMap = getParameterFromRequest(request);
			if (CheckParameter(parameterMust4, paraMap)) {
				String parameter = mapToString(paraMap);
				buffimage = lotteryService.getImage(parameter,request);
				ServletOutputStream sos;
				try {
					sos = response.getOutputStream();
					sos.write(buffimage);
					sos.flush();
					sos.close();
				} catch (IOException e) {
					log.error("getImage()->输出图片时出错！ " + e);
				}
			} else {
				result.put("respCode", -100);
				result.put("respInfo", "App发送数据错误!");
				resultGson = new Gson().toJson(result);
				writerGson(resultGson,request, response);
			}
		} catch (DocumentException e) {
			result.put("respCode", -101);
			result.put("respInfo", "App发送xml报文格式出错!");
			resultGson = new Gson().toJson(result);
			log.error("getSalesInfo()->App发送xml报文格式出错!" + e.toString());
			writerGson(resultGson,request, response);
		} catch (IOException e) {
			result.put("respCode", -200);
			result.put("respInfo", "读取请求xml报文出错！");
			resultGson = new Gson().toJson(result);
			log.error("getSalesInfo()->读取请求xml报文出错！" + e.toString());
			writerGson(resultGson,request, response);
		}
	}
	
	@RequestMapping("/getActiveImage")
	public void getActiveImage(HttpServletRequest request,HttpServletResponse response){
		HashMap<String, String> paraMap = null;
		HashMap<String, Object> result = new HashMap<String, Object>();
		String resultGson;
		byte [] buffimage;
		try {
			paraMap = getParameterFromRequest(request);
			if (CheckParameter(parameterMust5, paraMap)) {
				String parameter = mapToString(paraMap);
				buffimage = lotteryService.getActiveImage(parameter,request);
				ServletOutputStream sos;
				try {
					sos = response.getOutputStream();
					sos.write(buffimage);
					sos.flush();
					sos.close();
				} catch (IOException e) {
					log.error("getImage()->输出图片时出错！ " + e);
				}
			} else {
				result.put("respCode", -100);
				result.put("respInfo", "App发送数据错误!");
				resultGson = new Gson().toJson(result);
				writerGson(resultGson,request, response);
			}
		} catch (DocumentException e) {
			result.put("respCode", -101);
			result.put("respInfo", "App发送xml报文格式出错!");
			resultGson = new Gson().toJson(result);
			log.error("getSalesInfo()->App发送xml报文格式出错!" + e.toString());
			writerGson(resultGson, request, response);
		} catch (IOException e) {
			result.put("respCode", -200);
			result.put("respInfo", "读取请求xml报文出错！");
			resultGson = new Gson().toJson(result);
			log.error("getSalesInfo()->读取请求xml报文出错！" + e.toString());
			writerGson(resultGson, request, response);
		}
	}
}
