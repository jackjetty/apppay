package com.ris.mobile.ecloud.activity;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;

import com.ris.mobile.ecloud.BaseActivity;
import com.ris.mobile.ecloud.R; 
import com.ris.mobile.ecloud.LApplication; 
import com.ris.mobile.ecloud.log.CommonLog;
import com.ris.mobile.ecloud.log.LogFactory;
import com.ris.mobile.ecloud.object.ConnectErrorObject; 
import com.ris.mobile.ecloud.object.RequestObject;
import com.ris.mobile.ecloud.object.ResponseObject; 
import com.ris.mobile.ecloud.parser.BaseParser;
import com.ris.mobile.ecloud.parser.ResponseParser;
import com.ris.mobile.ecloud.util.CommonUtil;
import com.ris.mobile.ecloud.util.Constant;
import com.ris.mobile.ecloud.util.SharedPreferenceUtil;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.AssetFileDescriptor;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Vibrator;
import android.provider.MediaStore;
import android.text.TextUtils;
import android.view.Gravity;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;  
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;  
public class FindPasswordActivity extends BaseActivity  implements  OnClickListener  {
	private static final String TAG = "FindPasswordActivity";
	private static final CommonLog log = LogFactory.createLog(TAG);
	
	private TextView tvBack;
	private TextView tvTitle;
	private TextView tvRight;
	
	
	private EditText etPhoneNumber;
	private EditText etVerifyCode; 
	private Button  btnVerify; 
	private Button  btnFindPW;
	
	private float norTextSize;
	private float bigTextSize;
	
	public static LApplication lApplication=LApplication.getInstance();
	private SharedPreferenceUtil sharedPreferenceUtil;
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_findpassword);
		initData(getIntent());
		findViewById();
		initView();
		setListener();
		 
	}
	public void findViewById(){
		tvBack=(TextView) findViewById(R.id.tv_Back);
    	tvTitle=(TextView) findViewById(R.id.tv_Title);
    	tvRight=(TextView) findViewById(R.id.tv_Right); 
    	
    	
    	etPhoneNumber=(EditText) findViewById(R.id.et_PhoneNumber); 
    	etVerifyCode=(EditText) findViewById(R.id.et_VerifyCode);  
    	btnVerify=(Button) findViewById(R.id.btn_Verify); 
    	btnFindPW=(Button) findViewById(R.id.btn_FindPW); 
	}
	public    void initData(Intent intent){ 
		sharedPreferenceUtil=new SharedPreferenceUtil(FindPasswordActivity.this);
		
	}
	public void initView(){ 
		tvBack.setVisibility(View.VISIBLE);
    	tvTitle.setVisibility(View.VISIBLE);
    	tvTitle.setText(R.string.title_findpassword);
    	tvRight.setVisibility(View.INVISIBLE); 
    	norTextSize=btnVerify.getTextSize();
    	bigTextSize=norTextSize+0.2f;
	}
	public void setListener(){
		tvBack.setOnClickListener(this); 
		btnVerify.setOnClickListener(this);
		btnFindPW.setOnClickListener(this); 
	}
	@Override
	public void onConfigurationChanged(Configuration config) {
			 super.onConfigurationChanged(config); 
			if (config.orientation == Configuration.ORIENTATION_PORTRAIT) {
			 
			} 
			if (config.orientation == Configuration.ORIENTATION_LANDSCAPE) {
			 
			 
			}
	}
	
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		HashMap<String, String> requestDataMap;
		String phoneNumber;
		switch (v.getId()) {
		  case R.id.tv_Back:
			  FindPasswordActivity.this.finish();
			 break;
		  case R.id.btn_Verify:
			  if(!btnVerify.isEnabled()){
					return;
				}
			  phoneNumber=CommonUtil.trim(etPhoneNumber.getText().toString());
			  if(!CommonUtil.isValidMobiNumber(phoneNumber)){
				  DisPlay("error","请输入正确的手机号码！！");
				  etPhoneNumber.requestFocus();
				  return;
			  }
			  requestDataMap=new HashMap<String, String>();
			  requestDataMap.put("mobile",  phoneNumber);
			  
              BaseParser<ResponseObject> responseParser1 = new ResponseParser();
			  
		      RequestObject vo1 = new RequestObject(R.string.url_verifyfindpassword, this, requestDataMap, responseParser1);
				 
			  getDataFromServer(vo1, new DataCallback<ResponseObject>() {  
					@Override
					public void processData(ResponseObject paramObject, boolean paramBoolean) {
						if(paramObject.isSuccess()){
							new Thread(new Times()).start();
							  
						  }else{
							  DisPlay("error", CommonUtil.trim(paramObject.getInfo()));
						  }
						return; 

					}
					@Override
		    		public void processError(ConnectErrorObject responseErrorVo){
						  
						 DisPlay("error",responseErrorVo.getErrInfo());
						 
		    		}
				},true);
				
				break;
		  
		  case R.id.btn_FindPW:  
			   phoneNumber=CommonUtil.trim(etPhoneNumber.getText().toString());
			  String verifyCode=CommonUtil.trim(etVerifyCode.getText().toString());
			  
			  if(!CommonUtil.isValidMobiNumber(phoneNumber)){
				  DisPlay("error","请输入正确的手机号码！！");
				  etPhoneNumber.requestFocus();
				  return;
			  }
			  if(!CommonUtil.isInteger(verifyCode)){
				  DisPlay("error","请输入正确验证码！！");
				  etVerifyCode.requestFocus();
				  return;
			  }
			  requestDataMap=new HashMap<String, String>(); 
			  requestDataMap.put("mobile", phoneNumber);
			  requestDataMap.put("verifyCode",verifyCode );
			   
			  final Bundle myBundel=new Bundle(); 
			  myBundel.putString("phoneNumber",phoneNumber); 
			  myBundel.putString("verifyCode",verifyCode); 
              BaseParser<ResponseObject> responseParser = new ResponseParser();
			  
		      RequestObject vo = new RequestObject(R.string.url_retrievepagepassword, this, requestDataMap, responseParser);
		      getDataFromServer(vo, new DataCallback<ResponseObject>() {
					@Override
					public void processData(ResponseObject paramObject, boolean paramBoolean) {
						  if(paramObject.isSuccess()){
							  //DisPlay("correct",CommonUtil.trim(paramObject.getInfo())); 
							   
							   
								 openActivity(FindUpdatePasswordActivity.class,myBundel);
								 
								 FindPasswordActivity.this.finish();
							  
							  
						  }else{
							  DisPlay("error", CommonUtil.trim(paramObject.getInfo()));
						  } 
					}
					@Override
		    		public void processError(ConnectErrorObject responseErrorVo){
						 
						DisPlay("error",responseErrorVo.getErrInfo());
		    		}
				}); 
			  break;
		}
	}
		Handler handler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				switch (msg.arg2) {
				case 0: 
					btnVerify.setEnabled(false);
					btnVerify.setTextColor(getResources().getColor(R.color.text_blue));
					btnVerify.setText("    "+new Integer(msg.arg1).toString()+"秒    " ); 
					btnVerify.setBackgroundDrawable(getResources().getDrawable(R.drawable.btn_verify_disable));   
					
					if (msg.arg1 == 1) {
						 btnVerify.setEnabled(true);
						 btnVerify.setText("发送验证码"); 
						 btnVerify.setTextColor(getResources().getColor(R.color.white));
						 btnVerify.setBackgroundDrawable(getResources().getDrawable(R.drawable.btn_verify));
						 					 				 
					}
					break; 
				default:
					break;
				}
				super.handleMessage(msg);
			}
		};
		
		private class Times implements Runnable{
			@Override
			public void run() {

				int a = 60;
				while(true){
					try {
						
						Message message = new Message();
						message.arg2 = 0;
						message.arg1 = a;
						handler.sendMessage(message);
						if (a == 1) {
							break;
						}
						a = a-1;
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
						
			}
		}
}
	

