package com.ris.mobile.ecloud.activity; 
import java.util.ArrayList;
import java.util.Random; 

import android.content.ContentValues;
import android.content.Context; 
import android.content.Intent;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.ris.mobile.ecloud.R;   
import com.ris.mobile.ecloud.adapter.ApplyAdapter;
import com.ris.mobile.ecloud.adapter.ICCardBillAdapter; 
import com.ris.mobile.ecloud.BaseActivity;
import com.ris.mobile.ecloud.LApplication;
 
import com.ris.mobile.ecloud.log.CommonLog;
import com.ris.mobile.ecloud.log.LogFactory; 
import com.ris.mobile.ecloud.object.ApplyItemObject;
import com.ris.mobile.ecloud.object.ConnectErrorObject;
   
import com.ris.mobile.ecloud.object.RequestObject; 
import com.ris.mobile.ecloud.parser.ApplyItemListParser;
import com.ris.mobile.ecloud.parser.BaseParser;   
import com.ris.mobile.ecloud.util.CommonUtil;
import com.ris.mobile.ecloud.util.SharedPreferenceUtil; 
import com.ris.mobile.ecloud.widget.PullToRefreshLayout;
import com.ris.mobile.ecloud.widget.PullToRefreshLayout.OnRefreshListener; 
import com.ris.mobile.ecloud.widget.pullableview.PullableListView;

import android.content.Context;
import android.graphics.Rect;
import android.os.Bundle;  
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;  
import android.text.InputType;
import android.view.LayoutInflater;  
import android.view.MotionEvent;
import android.view.View;  
import android.view.View.OnTouchListener;
import android.view.ViewGroup;  
import android.view.View.OnClickListener; 
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.LinearLayout;
import android.widget.TextView; 
import android.widget.Toast;
      
public class ApplyActivity  extends BaseActivity implements      OnRefreshListener ,OnClickListener{  
	private static final String TAG =ApplyActivity.class.getSimpleName(); ;;
	private static final CommonLog log = LogFactory.createLog(TAG);
	
	 
	private TextView tvBack;
	private TextView tvTitle; 
	private TextView tvRight;
	private PullToRefreshLayout refreshView;
	private LinearLayout llNoRecord;
	
	
	public static LApplication lApplication=LApplication.getInstance();
	private Context mContext; 
	private PullableListView lvApply;
	private List<ApplyItemObject> data;
	private ApplyAdapter mAdapter; 
	  
	private int pageIndex=1;
	private int pageSize=15;
	private SharedPreferenceUtil sharedPreferenceUtil; 
	
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_apply);
		initData(getIntent());
		findViewById();
		initView();
		setListener();
	 
	}
	public    void initData(Intent intent){ 
		mContext=ApplyActivity.this;
		sharedPreferenceUtil=new SharedPreferenceUtil(mContext);
	}
	public void findViewById(){
		tvBack=(TextView) findViewById(R.id.tv_Back);
    	tvTitle=(TextView) findViewById(R.id.tv_Title); 
    	tvRight=(TextView) findViewById(R.id.tv_Right); 
    	lvApply=(PullableListView) findViewById(R.id.lv_Apply);
    	refreshView=((PullToRefreshLayout) findViewById(R.id.refresh_view));
    	llNoRecord=(LinearLayout) findViewById(R.id.ll_NoRecord); 
	}
	
	
	public void initView(){
	  	  
		tvBack.setVisibility(View.VISIBLE);
    	tvTitle.setVisibility(View.VISIBLE);
    	tvTitle.setText(R.string.title_apply);
    	tvRight.setVisibility(View.INVISIBLE);
    	llNoRecord.setVisibility(View.GONE);
    	
    	 
    	 
    	data =  new ArrayList<ApplyItemObject>(); 
    	mAdapter = new ApplyAdapter(mContext,lvApply,data);
    	lvApply.setAdapter(mAdapter); 
        lvApply.setOnScrollListener(mAdapter.onScrollListener);
    	refreshView.autoRefresh();
    	
    	/*
    	BaseParser<List<ApplyItemObject>> responseParser = new ApplyItemListParser();
    	HashMap<String, String> requestDataMap=new HashMap<String, String>(); 
		requestDataMap.put("pageNo",  new Integer(pageIndex).toString() );
		requestDataMap.put("pageSize", new Integer(pageSize).toString()  ); 
		requestDataMap.put("userType",  new Integer(sharedPreferenceUtil.getUserType()).toString() );
		RequestObject vo = new RequestObject(R.string.url_applyitemlist, mContext, requestDataMap, responseParser); 
		getDataFromServer(vo, new  DataCallback<List<ApplyItemObject>>() {
			@Override
			public void processData(List<ApplyItemObject> paramObject, boolean paramBoolean) { 
				 
		    	if(paramObject!=null)
		    		data.addAll(paramObject); 
		    	if(data.size()>0)
	    	        llNoRecord.setVisibility(View.GONE);
		          
		        
		        
		        
				return;
			}
			@Override
    		public void processError(ConnectErrorObject responseErrorVo){ 
				 DisPlay("error",responseErrorVo.getErrInfo());
				 
    		}
		},false); */
		
		
		
    	 
      }
	
	 public void setListener(){
	    	tvBack.setOnClickListener(this); 
	    	refreshView.setOnRefreshListener(this);
	    	 
	    	lvApply.setOnItemClickListener(new OnItemClickListener()
			{

				@Override
				public void onItemClick(AdapterView<?> parent, View view,
						int position, long id)
				{
					
				 
					
					
					ApplyItemObject applyItemObject=(ApplyItemObject)parent.getAdapter().getItem(position); 
					Bundle myBundel=new Bundle(); 
					myBundel.putString("applyId",CommonUtil.trim(applyItemObject.getApplyId())); 
					myBundel.putString("applyTitle", CommonUtil.trim(applyItemObject.getApplyTitle())); 
					ApplyActivity.this.openActivity(ApplyIntroduceActivity.class,myBundel); 
				}
			}); 
	    }
	 @Override
	 public void onClick(View v) {
			// TODO Auto-generated method stub
			switch (v.getId()) {
			  case R.id.tv_Back:
				 this.finish();
				 break; 
		    }
			
			
		} 
	 
	 @Override
		public void onStart() {
			super.onStart();
		
		}
	 public boolean onLoadData( final PullToRefreshLayout pullToRefreshLayout, final boolean isRefresh) {
		 
			
			if (isRefresh) {  
			    pageIndex=1;
			    data.clear();
	        } else {   
	        	pageIndex++;    
	        }  
		    pageIndex=pageIndex<1?1:pageIndex;
		    
	        BaseParser<List<ApplyItemObject>> responseParser = new ApplyItemListParser();
	        
			HashMap<String, String> requestDataMap=new HashMap<String, String>();
			 
			requestDataMap.put("pageNo",  new Integer(pageIndex).toString() );
			requestDataMap.put("pageSize", new Integer(pageSize).toString()  );  
			requestDataMap.put("userType",  new Integer(sharedPreferenceUtil.getUserType()).toString() );
			
				
			RequestObject vo = new RequestObject(R.string.url_applyitemlist, mContext, requestDataMap, responseParser); 
		    getDataFromServer(vo, new  DataCallback<List<ApplyItemObject>>() {
					@Override
					public void processData(List<ApplyItemObject> paramObject, boolean paramBoolean) { 
						 
				    	if(paramObject!=null&&paramObject.size()>0)
				    		data.addAll(paramObject);
				    	else
				    		pageIndex--; 
				    	if(data.size()>0)
			    	        llNoRecord.setVisibility(View.GONE);
				    	else
				    		llNoRecord.setVisibility(View.VISIBLE);
				    	mAdapter.notifyDataSetChanged(); 
				    	if (isRefresh)
				    		pullToRefreshLayout.refreshFinish(PullToRefreshLayout.SUCCEED);
				    	else
				    		pullToRefreshLayout.loadmoreFinish(PullToRefreshLayout.SUCCEED);
						return  ;
					}
					@Override
		    		public void processError(ConnectErrorObject responseErrorVo){ 
						if (isRefresh)
				    		pullToRefreshLayout.refreshFinish(PullToRefreshLayout.SUCCEED);
				    	else
				    		pullToRefreshLayout.loadmoreFinish(PullToRefreshLayout.SUCCEED);
						 DisPlay("error",responseErrorVo.getErrInfo());
						 
		    		}
			},false); 
		     
	    	 
	    	 
	        return false;   
		}
	 
	 @Override
		public void onRefresh(final PullToRefreshLayout pullToRefreshLayout)
		{ 
			onLoadData(pullToRefreshLayout,true); 
		}
	 
	 @Override
		public void onLoadMore(final PullToRefreshLayout pullToRefreshLayout)
		{
			 
			onLoadData(pullToRefreshLayout,false); 
		}	
	 
	 
		@Override
		public void onDestroy(){
			 
			super.onDestroy();
		}
		
}
	